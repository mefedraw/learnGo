package interfaces

import "fmt"

type impl struct{}

type I interface {
	C()
}

func (*impl) C() {}

func A() I {
	return nil

}
func B() I {
	var ret *impl
	return ret
}

func main() {
	a := A()
	b := B()
	fmt.Println(a == b)
}

/*
В Go интерфейс — это структура с двумя полями:
указатель на тип и указатель на данные.
Когда ты возвращаешь nil в качестве значения интерфейса,
оба этих поля будут nil (тип = nil, данные = nil).


func B() I { var ret *impl; return ret } — здесь объявляется переменная ret
типа *impl (указатель на impl), но она не инициализируется,
то есть по умолчанию имеет значение nil.
Затем эта переменная возвращается как значение типа интерфейса I.

В Go два значения интерфейса равны (==), если:
Оба являются nil (тип и данные — nil).
У них одинаковый тип и равные данные
(сравниваются значения, на которые указывают данные).
*/
